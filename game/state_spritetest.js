var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { tt } from "../ttapi_interface/ttapi.js";
import * as tt2 from "../ttapi_layer2/ttlayer2.js";
import { UITool } from "./uitool.js";
import { State_Logo } from "./state_logo.js";
export class State_SpriteTest {
    OnInit(statemgr) {
        this.app = statemgr;
        this.hasinited = false;
        this.StartAsync();
    }
    StartAsync() {
        return __awaiter(this, void 0, void 0, function* () {
            this.cats = yield tt2.QFrame_ResMgr.LoadStandaloneSpriteAsync("data/p1.jpg");
            this.atlas = yield tt2.QFrame_ResMgr.LoadAtlasAsync("data/splittex_pack0.png");
            //加一个退出按钮
            let btn = yield UITool.CreateButton(this.app.font, "<--");
            btn.localRect.setByRect(new tt.Rectangle(50, 100, 150, 50));
            this.app.canvas.addChild(btn);
            btn.OnClick = () => {
                this.app.ChangeState(new State_Logo());
            };
            //中心看中心
            this.app.batcherBottom.LookAt.X = this.app.target.getWidth() / 2;
            this.app.batcherBottom.LookAt.Y = this.app.target.getHeight() / 2;
            this.hasinited = true;
        });
    }
    OnExit() {
        this.app.canvas.removeChildAll();
    }
    OnUpdate(delta) {
        if (!this.hasinited)
            return;
    }
    OnRender() {
        if (!this.hasinited)
            return;
        let b = this.app.batcherBottom;
        this.app.batcherBottom.BeginDraw(this.app.target);
        this.cats.Render(b, new tt.Vector2(0, 0), new tt.Vector2(0.5, 0.5), tt.Color.White);
        let w = this.app.target.getWidth();
        let h = this.app.target.getHeight();
        for (var i = 0; i < 256; i++) {
            var iss = i % this.atlas.allsprite.length;
            var s = this.atlas.allsprite[iss];
            s.Render(b, new tt.Vector2(Math.random() * w, Math.random() * h / 2), new tt.Vector2(1, 1));
            //this.drawRect(ltex, 0, new tt.Rectangle(Math.random() * w, Math.random() * h, 12, 12));
        }
        let inputscale = tt.graphic.getFinalScale();
        let ps = tt.input.GetInputPoints();
        for (var i = 0; i < ps.length; i++) {
            if (ps[i].press) {
                var iss = ((Math.random() * 1000) | 0) % this.atlas.allsprite.length;
                var s = this.atlas.allsprite[iss];
                if (s == undefined)
                    continue;
                console.log("inputscale=" + inputscale + " id = " + ps[i].id + " i =" + i);
                s.Render(b, new tt.Vector2(ps[i].x * inputscale - 64, ps[i].y * inputscale - 64), new tt.Vector2(1, 1), tt.Color.White);
            }
        }
        this.app.batcherBottom.EndDraw();
    }
}
//# sourceMappingURL=data:application/json;base64,